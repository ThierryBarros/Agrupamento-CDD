mutate_each(funs(as.vector(scale(.))), 2:5)
summary(dw2.scaled)
dw2.scaled %>%
select(-repository_language) %>%
ggpairs()
# Escala de log
# dw2 <- dw %>%
#     mutate_each(funs(log), 2:5)
dw2 %>%
select(-repository_language) %>%
ggpairs()
summary(select(dw2, -repository_language))
dw2.scaled = dw2 %>%
mutate_each(funs(as.vector(scale(.))), 2:5)
summary(dw2.scaled)
dw2.scaled %>%
select(-repository_language) %>%
ggpairs()
View(dw2)
View(dw2)
dists = dw2.scaled %>%
as.data.frame() %>%
column_to_rownames("repository_language") %>%
dist(method = "euclidean")
hc = hclust(dists, method = "ward.D")
plot(hc, cex = .6)
plot(hc, hang = -1)
n_clusters = 3
rect.hclust(hc, k=n_clusters)
dw2 <- dw2 %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.scaled <- dw2.scaled %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.long = melt(dw2.scaled, id.vars = c("repository_language", "cluster"))
hc %>%
cutree(k = n_clusters) %>%
silhouette(dists) %>%
plot(col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
dw2.long %>%
ggplot(aes(x = variable, y = value, group = repository_language, colour = cluster)) +
geom_line(alpha = 0.4) +
facet_wrap(~ cluster)
View(dw2.long)
dists = dw2.scaled %>%
as.data.frame() %>%
column_to_rownames("repository_language") %>%
dist(method = "euclidean")
hc = hclust(dists, method = "ward.D")
plot(hc, cex = .6)
plot(hc, hang = -1)
n_clusters = 3
rect.hclust(hc, k=n_clusters)
dw2 <- dw2 %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.scaled <- dw2.scaled %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.long = melt(dw2.scaled, id.vars = c("repository_language", "cluster"))
hc %>%
cutree(k = n_clusters) %>%
silhouette(dists) %>%
plot(col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
dw2.long %>%
ggplot(aes(x = variable, y = value, group = repository_language, colour = cluster)) +
geom_line(alpha = 0.4) +
facet_wrap(~ cluster)
View(dw2)
library(plotly)
p <- dw2 %>%
plot_ly(type = 'parcoords',
line = list(color = ~cluster),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(0, 4),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(0, 4),
constraintrange = c(5,6),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(0, 4),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(0, 4),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
dw2.scaled = dw2.scaled %>%
select(-cluster) # Remove o cluster adicionado antes lá em cima via hclust
# O agrupamento de fato:
km = dw2.scaled %>%
select(-repository_language) %>%
kmeans(centers = n_clusters, nstart = 20)
# O df em formato longo, para visualização
dw2.scaled.km.long = km %>%
augment(dw2.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
-repository_language, -.cluster) # = move para long todas as
# variávies menos repository_language
# e .cluster
dw2.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = repository_language, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster)
autoplot(km, data = dw2.scaled, label = TRUE)
dists = dw2.scaled %>%
select(-repository_language) %>%
dist() # só para plotar silhouetas depois
plot(silhouette(km$cluster, dists), col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
table(km$cluster)
View(dw2)
View(dw)
View(dw2)
View(dw)
View(dw2)
View(dw2.scaled)
View(dw2.scaled)
#summary(dw2.scaled)
p <- km %>%
augment(dw2.scaled) %>%
plot_ly(type = 'parcoords',
line = list(color = ~.cluster,
showScale = TRUE),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(-3, 3),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(-3, 3),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(-6, 3),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(-2, 3),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
km <- kmeans(rs, centers=4, nstart=10)
require(GGally, quietly = TRUE)
require(reshape2, quietly = TRUE)
require(tidyverse, quietly = TRUE, warn.conflicts = FALSE)
library(ggfortify)
library(cluster)
library(ggdendro)
library(broom)
theme_set(theme_bw())
source("github-lib.R")
dw <- load_github_wide()
summary(dw)
dw %>%
select(-repository_language) %>%
ggpairs()
# XML e Bluespec têm mais de 50 pushes / repositório e
# outras linguagens têm também números estranhos. Filtraremos.
dw2 <- dw %>%
filter(PushEvent < 50, IssuesEvent < 50, ForkEvent < 18)
# Escala de log
# dw2 <- dw %>%
#     mutate_each(funs(log), 2:5)
dw2 %>%
select(-repository_language) %>%
ggpairs()
summary(select(dw2, -repository_language))
dw2.scaled = dw2 %>%
mutate_each(funs(as.vector(scale(.))), 2:5)
summary(dw2.scaled)
dw2.scaled %>%
select(-repository_language) %>%
ggpairs()
dists = dw2.scaled %>%
as.data.frame() %>%
column_to_rownames("repository_language") %>%
dist(method = "euclidean")
hc = hclust(dists, method = "ward.D")
plot(hc, cex = .6)
plot(hc, hang = -1)
n_clusters = 3
rect.hclust(hc, k=n_clusters)
dw2 <- dw2 %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.scaled <- dw2.scaled %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.long = melt(dw2.scaled, id.vars = c("repository_language", "cluster"))
hc %>%
cutree(k = n_clusters) %>%
silhouette(dists) %>%
plot(col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
dw2.long %>%
ggplot(aes(x = variable, y = value, group = repository_language, colour = cluster)) +
geom_line(alpha = 0.4) +
facet_wrap(~ cluster)
library(plotly)
p <- dw2 %>%
plot_ly(type = 'parcoords',
line = list(color = ~cluster),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(0, 4),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(0, 4),
constraintrange = c(5,6),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(0, 4),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(0, 4),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
dw2.scaled = dw2.scaled %>%
select(-cluster) # Remove o cluster adicionado antes lá em cima via hclust
# O agrupamento de fato:
km = dw2.scaled %>%
select(-repository_language) %>%
kmeans(centers = n_clusters, nstart = 20)
# O df em formato longo, para visualização
dw2.scaled.km.long = km %>%
augment(dw2.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
-repository_language, -.cluster) # = move para long todas as
# variávies menos repository_language
# e .cluster
dw2.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = repository_language, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster)
autoplot(km, data = dw2.scaled, label = TRUE)
dists = dw2.scaled %>%
select(-repository_language) %>%
dist() # só para plotar silhouetas depois
plot(silhouette(km$cluster, dists), col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
table(km$cluster)
#summary(dw2.scaled)
p <- km %>%
augment(dw2.scaled) %>%
plot_ly(type = 'parcoords',
line = list(color = ~.cluster,
showScale = TRUE),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(-3, 3),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(-3, 3),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(-6, 3),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(-2, 3),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
plot_clusgap = function(clusgap, title="Gap Statistic calculation results"){
require("ggplot2")
gstab = data.frame(clusgap$Tab, k=1:nrow(clusgap$Tab))
p = ggplot(gstab, aes(k, gap)) + geom_line() + geom_point(size=5)
p = p + geom_errorbar(aes(ymax=gap+SE.sim, ymin=gap-SE.sim), width = .2)
p = p + ggtitle(title)
return(p)
}
gaps <- dw2.scaled %>%
select(-repository_language) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8, B = 200)
plot_clusgap(gaps)
filmes = read_csv(here::here("dados/filmes-scarlett-johanssson.csv"))
gaps <- filmes %>%
select(`BOX OFFICE`, RATING) %>%
mutate(RATING = log10(RATING)) %>%
mutate_all(scale) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8)
plot_clusgap(gaps)
set.seed(123)
explorando_k = tibble(k = 1:15) %>%
group_by(k) %>%
do(
kmeans(select(dw2.scaled, -repository_language),
centers = .$k,
nstart = 20) %>% glance()
)
explorando_k %>%
ggplot(aes(x = k, y = betweenss / totss)) +
geom_line() +
geom_point()
filmes = readr::read_csv("dados/filmes-scarlett-johanssson.csv")
filmes_t = filmes %>%
select(-CREDIT) %>%
mutate(`BOX OFFICE` = log10(`BOX OFFICE`)) %>%
mutate_each(funs(as.vector(scale(.))), `BOX OFFICE`, RATING)
atribuicoes = tibble(k = 1:6) %>%
group_by(k) %>%
do(kmeans(select(filmes_t, RATING, `BOX OFFICE`),
centers = .$k,
nstart = 10) %>% augment(filmes)) # alterne entre filmes e filmes_t no augment
atribuicoes_long = atribuicoes %>%
gather(key = "variavel", value = "valor", -TITLE, -k, -.cluster, -CREDIT)
atribuicoes %>%
ggplot(aes(x = RATING, y = `BOX.OFFICE`, label = TITLE, colour = .cluster)) +
geom_point() +
#geom_text() +
facet_wrap(~ k) + scale_y_log10()
# A silhoueta
dists = select(filmes_t, RATING, `BOX OFFICE`) %>% dist()
km = kmeans(select(filmes_t, RATING, `BOX OFFICE`),
centers = 4,
nstart = 10)
silhouette(km$cluster, dists) %>%
plot(col = RColorBrewer::brewer.pal(4, "Set2"))
set.seed(123)
explorando_k = tibble(k = 1:15) %>%
group_by(k) %>%
do(
kmeans(select(filmes_t, -TITLE),
centers = .$k,
nstart = 20) %>% glance()
)
explorando_k %>%
ggplot(aes(x = k, y = betweenss / totss)) +
geom_line() +
geom_point()
dists = dist(rs, method = "euclidean")
km <- kmeans(rs, centers=4, nstart=10)
plot_clusgap = function(clusgap, title="Gap Statistic calculation results"){
require("ggplot2")
gstab = data.frame(clusgap$Tab, k=1:nrow(clusgap$Tab))
p = ggplot(gstab, aes(k, gap)) + geom_line() + geom_point(size=5)
p = p + geom_errorbar(aes(ymax=gap+SE.sim, ymin=gap-SE.sim), width = .2)
p = p + ggtitle(title)
return(p)
}
gaps <- dw2.scaled %>%
select(-repository_language) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8, B = 200)
plot_clusgap(gaps)
filmes = read_csv(here::here("dados/filmes-scarlett-johanssson.csv"))
gaps <- filmes %>%
select(`BOX OFFICE`, RATING) %>%
mutate(RATING = log10(RATING)) %>%
mutate_all(scale) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8)
plot_clusgap(gaps)
dists = dw2.scaled %>%
as.data.frame() %>%
column_to_rownames("repository_language") %>%
dist(method = "euclidean")
hc = hclust(dists, method = "ward.D")
plot(hc, cex = .6)
plot(hc, hang = -1)
n_clusters = 3
rect.hclust(hc, k=n_clusters)
dw2 <- dw2 %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.scaled <- dw2.scaled %>%
mutate(cluster = hc %>%
cutree(k = n_clusters) %>%
as.character())
dw2.long = melt(dw2.scaled, id.vars = c("repository_language", "cluster"))
hc %>%
cutree(k = n_clusters) %>%
silhouette(dists) %>%
plot(col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
dw2.long %>%
ggplot(aes(x = variable, y = value, group = repository_language, colour = cluster)) +
geom_line(alpha = 0.4) +
facet_wrap(~ cluster)
library(plotly)
p <- dw2 %>%
plot_ly(type = 'parcoords',
line = list(color = ~cluster),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(0, 4),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(0, 4),
constraintrange = c(5,6),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(0, 4),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(0, 4),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
dw2.scaled = dw2.scaled %>%
select(-cluster) # Remove o cluster adicionado antes lá em cima via hclust
# O agrupamento de fato:
km = dw2.scaled %>%
select(-repository_language) %>%
kmeans(centers = n_clusters, nstart = 20)
# O df em formato longo, para visualização
dw2.scaled.km.long = km %>%
augment(dw2.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
-repository_language, -.cluster) # = move para long todas as
# variávies menos repository_language
# e .cluster
dw2.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = repository_language, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster)
autoplot(km, data = dw2.scaled, label = TRUE)
dists = dw2.scaled %>%
select(-repository_language) %>%
dist() # só para plotar silhouetas depois
plot(silhouette(km$cluster, dists), col = RColorBrewer::brewer.pal(n_clusters, "Set2"))
table(km$cluster)
#summary(dw2.scaled)
p <- km %>%
augment(dw2.scaled) %>%
plot_ly(type = 'parcoords',
line = list(color = ~.cluster,
showScale = TRUE),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(-3, 3),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(-3, 3),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(-6, 3),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(-2, 3),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
plot_clusgap = function(clusgap, title="Gap Statistic calculation results"){
require("ggplot2")
gstab = data.frame(clusgap$Tab, k=1:nrow(clusgap$Tab))
p = ggplot(gstab, aes(k, gap)) + geom_line() + geom_point(size=5)
p = p + geom_errorbar(aes(ymax=gap+SE.sim, ymin=gap-SE.sim), width = .2)
p = p + ggtitle(title)
return(p)
}
gaps <- dw2.scaled %>%
select(-repository_language) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8, B = 200)
plot_clusgap(gaps)
library(plotly)
p <- dw2 %>%
plot_ly(type = 'parcoords',
line = list(color = ~cluster),
dimensions = list(
#list(range = c(1, 4), label = "cluster", values = ~cluster),
list(range = c(0, 4),
label = 'Forks/repo', values = ~ForkEvent),
list(range = c(0, 4),
constraintrange = c(5,6),
label = 'Issues/repo', values = ~IssuesEvent),
list(range = c(0, 4),
label = 'Pushes/repo', values = ~PushEvent),
list(range = c(0, 4),
label = 'Watches/repo', values = ~WatchEvent)
)
)
p
plot_clusgap = function(clusgap, title="Gap Statistic calculation results"){
require("ggplot2")
gstab = data.frame(clusgap$Tab, k=1:nrow(clusgap$Tab))
p = ggplot(gstab, aes(k, gap)) + geom_line() + geom_point(size=5)
p = p + geom_errorbar(aes(ymax=gap+SE.sim, ymin=gap-SE.sim), width = .2)
p = p + ggtitle(title)
return(p)
}
gaps <- dw2.scaled %>%
select(-repository_language) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8, B = 200)
plot_clusgap(gaps)
filmes = read_csv(here::here("dados/filmes-scarlett-johanssson.csv"))
gaps <- filmes %>%
select(`BOX OFFICE`, RATING) %>%
mutate(RATING = log10(RATING)) %>%
mutate_all(scale) %>%
clusGap(FUN = kmeans, nstart = 20, K.max = 8)
plot_clusgap(gaps)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123) # com a mesma semente, o gerador de números aleatórios gera a mesma sequência
t1 = tibble(
formato = "Sem estrutura de grupos",
variavel = runif(140, min = -5, max = 100)
)
t2 = tibble(
formato = "Com estrutura de grupos",
variavel = c(rnorm(100, mean = 10, sd = 8),
rnorm(40, mean = 80, sd = 15))
)
t3 = tibble(
formato = "Grupos e outliers",
variavel = c(rnorm(100, mean = 10, sd = 10), 75, 110)
)
bind_rows(t1, t2, t3) %>%
ggplot(aes(x = formato, y = variavel)) +
geom_jitter(width = .05, height = 0, size = 2, alpha = .6, color = "#F04155")
